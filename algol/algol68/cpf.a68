PROC reter_numeros = (STRING text, INT n) STRING: (
    STRING only_nums := "0" * n;
    BOOL done := FALSE;
    INT num pos := 1;
    INT count := 0;

    # Counting numeric characters in text and storing into count #
    FOR i FROM LWB text TO UPB text DO
        IF NOT done THEN
            IF text[i] >= "0" AND text[i] <= "9" THEN
                count +:= 1 FI;
            IF count = n THEN
                done := TRUE FI FI OD;

    # Attributing numeric characters to only_nums in the correct position #
    done := FALSE;
    IF count > 0 THEN
        IF count < n THEN
            num pos +:= n - count FI;
        count := 0;
        FOR i FROM LWB text TO UPB text DO
            IF NOT done THEN
                IF text[i] >= "0" AND text[i] <= "9" THEN
                    only_nums[num pos] := text[i];
                    num pos +:= 1;
                    count +:= 1 FI;
                IF count = n THEN
                    done := TRUE FI FI OD FI;

    # If no numeric character is found, return empty string #
    IF (count = 0) THEN
        only_nums := "" FI;

    only_nums
);

PROC exponential = (INT base, INT exp) INT: (
    INT result := 0;
    INT limit := exp - 1;
    IF exp = 0 THEN result := 1 FI;
    IF exp > 0 THEN result := base FI;
    IF exp > 1 THEN
        FOR i FROM 1 TO limit DO
            result *:= base OD FI;
    result
);

PROC parse_int = (STRING s, INT numeric sys) INT: (
    INT count := 0;
    INT int := 0;
    FOR i FROM LWB s TO UPB s DO
        IF s[i] >= "0" AND s[i] <= "9" THEN
            count +:= 1 FI OD;
    FOR i FROM LWB s TO UPB s DO
        int +:= char_to_int(s[i]) * exponential(numeric sys, count - i) OD;
    int
);

PROC char_to_int = (CHAR c) INT: (
    BOOL done := FALSE;
    INT num := -1;
    WHILE NOT done DO
        IF c = "0" THEN num := 0; done := TRUE FI;
        IF c = "1" THEN num := 1; done := TRUE FI;
        IF c = "2" THEN num := 2; done := TRUE FI;
        IF c = "3" THEN num := 3; done := TRUE FI;
        IF c = "4" THEN num := 4; done := TRUE FI;
        IF c = "5" THEN num := 5; done := TRUE FI;
        IF c = "6" THEN num := 6; done := TRUE FI;
        IF c = "7" THEN num := 7; done := TRUE FI;
        IF c = "8" THEN num := 8; done := TRUE FI;
        IF c = "9" THEN num := 9 FI;
        done := TRUE OD;
    num
);

PROC int_to_char = (INT i) CHAR: (
    BOOL done := FALSE;
    CHAR char := " ";
    WHILE NOT done DO
        IF i = 0 THEN char := "0"; done := TRUE FI; 
        IF i = 1 THEN char := "1"; done := TRUE FI;
        IF i = 2 THEN char := "2"; done := TRUE FI;
        IF i = 3 THEN char := "3"; done := TRUE FI;
        IF i = 4 THEN char := "4"; done := TRUE FI;
        IF i = 5 THEN char := "5"; done := TRUE FI;
        IF i = 6 THEN char := "6"; done := TRUE FI;
        IF i = 7 THEN char := "7"; done := TRUE FI;
        IF i = 8 THEN char := "8"; done := TRUE FI;
        IF i = 9 THEN char := "9" FI;
        done := TRUE OD;
    char
);

PROC calcular_digito_verificador = (STRING cpf) INT: (
    INT factor, remainder, result, count, sum;
    result := 0; count := 0; sum := 0;

    FOR i FROM LWB cpf TO UPB cpf DO
        IF cpf[i] >= "0" AND cpf[i] <= "9" THEN
            count +:= 1 FI OD;

    factor := count + 1;
    FOR i FROM LWB cpf TO UPB cpf DO
        sum +:= parse_int(cpf[i], 10) * factor;
        factor -:= 1 OD;

    remainder := sum MOD 11;
    IF remainder > 1 THEN
        result := 11 - remainder
    FI;

    result
);

PROC calcular_digitos = (STRING cpf) []INT: (
    [1:2]INT dvs;
    STRING only_nums;

    only_nums := reter_numeros(cpf, 9);
    dvs[1] := calcular_digito_verificador(only_nums);

    only_nums := only_nums + int_to_char(dvs[1]);
    dvs[2] := calcular_digito_verificador(only_nums);

    dvs
);

PROC demo_main = VOID: (
    STRING str_result, text;
    [1:2]INT int_arr_result;
    INT n;

    print(("reter_numeros(STRING text, INT n)   : STRING", newline));

    text := "test";           n := 1;
    str_result := reter_numeros(text, n);
    print(("- reter_numeros('", text, "'          , "));
    printf(($%d$, n)); print((" ) -> '", str_result, "'", newline));

    text := "test123";        n := 3;
    str_result := reter_numeros(text, n);
    print(("- reter_numeros('", text, "'       , "));
    printf(($%d$, n)); print((" ) -> '", str_result, "'", newline));

    text := "test192";        n := 4;
    str_result := reter_numeros(text, n);
    print(("- reter_numeros('", text, "'       , "));
    printf(($%d$, n)); print((" ) -> '", str_result, "'", newline));

    text := "123.456.789-00"; n := 9;
    str_result := reter_numeros(text, n);
    print(("- reter_numeros('", text, "', "));
    printf(($%d$, n)); print((" ) -> '", str_result, "'", newline));

    text := "123.456.789-00"; n := 11;
    str_result := reter_numeros(text, n);
    print(("- reter_numeros('", text, "', "));
    printf(($%d$, n)); print((") -> '", str_result, "'", newline));
    print(newline);


    print(("calcular_digitos(STRING cpf)        : []INT", newline));

    text := "test123";
    int_arr_result := calcular_digitos(text);
    print(("- calcular_digitos('", text, "'    )     -> "));
    print("( "); printf(($d$, int_arr_result[1])); print(", ");
    printf(($d$, int_arr_result[2])); print((" )", newline));

    text := "111.444.777";
    int_arr_result := calcular_digitos(text);
    print(("- calcular_digitos('", text, "')     -> "));
    print("( "); printf(($d$, int_arr_result[1])); print(", ");
    printf(($d$, int_arr_result[2])); print((" )", newline));

    text := "000.000.000";
    int_arr_result := calcular_digitos(text);
    print(("- calcular_digitos('", text, "')     -> "));
    print("( "); printf(($d$, int_arr_result[1])); print(", ");
    printf(($d$, int_arr_result[2])); print((" )", newline))
);

PROC demo_aux = VOID: (
    STRING text_result, text;
    CHAR char_result, char;
    INT int_result, int_1, int_2;


    print(("int_to_char(INT i)                  : CHAR", newline));

    int_1 := 7; char_result := int_to_char(int_1);
    print("- int_to_char("); printf(($%d$, int_1));
    print(")                      -> '"); print((char_result, "'", newline));

    int_1 := 4; char_result := int_to_char(int_1);
    print("- int_to_char("); printf(($%d$, int_1));
    print(")                      -> '"); print((char_result, "'", newline));

    int_1 := 1; char_result := int_to_char(int_1);
    print("- int_to_char("); printf(($%d$, int_1));
    print(")                      -> '"); print((char_result, "'", newline));
    print(newline);


    print(("char_to_int(CHAR c)                 : INT", newline));

    char := "1"; int_result := char_to_int(char);
    print(("- char_to_int('", char, "')                    -> "));
    printf(($%d$, int_result)); print(newline);

    char := "4"; int_result := char_to_int(char);
    print(("- char_to_int('", char, "')                    -> "));
    printf(($%d$, int_result)); print(newline);

    char := "7"; int_result := char_to_int(char);
    print(("- char_to_int('", char, "')                    -> "));
    printf(($%d$, int_result)); print((newline, newline));


    print(("exponential(INT base, INT exp)      : INT", newline));

    int_1 := 2; int_2 := 5;
    int_result := exponential(int_1, int_2);
    print("- exponential("); printf(($%d$, int_1)); print("  , ");
    printf(($%d$, int_2)); print(")                 -> ");
    printf(($%d$, int_result)); print(newline);

    int_1 := 3; int_2 := 4;
    int_result := exponential(int_1, int_2);
    print("- exponential("); printf(($%d$, int_1)); print("  , ");
    printf(($%d$, int_2)); print(")                 -> "); printf(($%d$, int_result));
    print(newline);

    int_1 := 100; int_2 := 2;
    int_result := exponential(int_1, int_2);
    print("- exponential("); printf(($%d$, int_1)); print(", ");
    printf(($%d$, int_2)); print(")                 -> "); printf(($%d$, int_result));
    print((newline, newline));


    print(("parse_int(STRING s, INT numeric sys): INT", newline));

    text := "12"; int_1 := 10; int_result := parse_int(text, int_1);
    print("- parse_int('"); print(text); print("'  , ");
    printf(($%d$, int_1)); print(")               -> "); printf(($%d$, int_result));
    print(newline);

    text := "1010"; int_1 := 2; int_result := parse_int(text, int_1);
    print("- parse_int('"); print(text); print("', ");
    printf(($%d$, int_1)); print(" )               -> "); printf(($%d$, int_result));
    print(newline);

    text := "100"; int_1 := 8; int_result := parse_int(text, int_1);
    print("- parse_int('"); print(text); print("' , ");
    printf(($%d$, int_1)); print(" )               -> "); printf(($%d$, int_result));
    print(newline)
);

demo_aux;
print(newline);
demo_main