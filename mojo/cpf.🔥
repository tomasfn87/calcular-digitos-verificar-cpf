from sys import argv

struct Cpf:
    var numero: String
    var numero_completo: String

    fn __init__(inout self, owned numero: String, owned numero_completo: String):
        self.numero = numero
        self.numero_completo = numero_completo

    fn set_numero(inout self, owned numero: String):
        self.numero = numero

    fn set_numero_completo(inout self, owned numero_completo: String):
        self.numero_completo = numero_completo

    fn reter_numeros(self, owned texto: String, owned n: Int) -> String:
        var result: String = ""

        for i in range(0, len(texto)):
            if ord(texto[i]) >= ord("0") and ord(texto[i]) <= ord("9"):
                result += texto[i]
            if len(result) == n:
                break

        if len(result) == 0:
            return result

        while len(result) < n:
            result = "0" + result

        return result

    fn calcular_digitos(self) -> DynamicVector[Int]:
        var only_nums: String = self.reter_numeros(self.numero, 9)
        var dvs = DynamicVector[Int]()

        dvs.append(self.calcular_digito_verificador(only_nums))
        only_nums += dvs[0]
        dvs.append(self.calcular_digito_verificador(only_nums^))

        return dvs

    fn calcular_digito_verificador(self, owned only_nums: String) -> Int:
        var factor: Int = len(only_nums) + 1
        var sum: Int = 0
        var mod: Int = 0

        for i in range(0, len(only_nums)):
            sum += factor * (ord(only_nums[i]) - ord("0"))
            factor -= 1

        mod = sum % 11
        if mod > 1:
            return 11 - mod

        return 0

    fn verificar(self) -> Bool:
        var only_nums = self.reter_numeros(self.numero_completo, 11)
        var cpf: Cpf = Cpf(self.reter_numeros(only_nums, 9), "")

        var dvs_calculados = cpf.calcular_digitos()
        var dvs_recebidos = DynamicVector[Int]()

        dvs_recebidos.append(ord(only_nums[9])-ord("0"))
        dvs_recebidos.append(ord(only_nums[10])-ord("0"))

        for i in range(0, 2):
            if dvs_calculados[i] != dvs_recebidos[i]:
                return False

        return True

fn help_user():
    print("Digite uma das opções abaixo:")
    print("- '-v' ou '--verificar' e um número de CPF")
    print("- '-c' ou '--calcular' e um número de CPF")
    print("- '--demo'")

fn demo():
    var c1 = Cpf("123", "123-60")
    var dvs1 = c1.calcular_digitos()
    var valid1 = c1.verificar()

    var c2 = Cpf("111.444.777", "111.444.777-36")
    var dvs2 = c2.calcular_digitos()
    var valid2 = c2.verificar()

    print("c1 = Cpf('123'        , '123-60')")
    print("c2 = Cpf('111.444.777', '111.444.777-36')")
    print()
    print("           reter_numeros('test', 1) ->", c1.reter_numeros("test", 1))
    print("        reter_numeros('test123', 2) ->", c1.reter_numeros("test123", 2))
    print("        reter_numeros('test123', 3) ->", c1.reter_numeros("test123", 3))
    print("        reter_numeros('test123', 4) ->", c1.reter_numeros("test123", 4))
    print()
    print("    reter_numeros('111.444.777', 9) ->",
        c2.reter_numeros("111.444.777", 9))
    print("reter_numeros('111.444.777-36', 11) ->",
        c2.reter_numeros("111.444.777-36", 11))
    print()
    print("              c1.calcular_digitos() -> [", String(dvs1[0])+",",
        dvs1[1], "]")
    print("              c2.calcular_digitos() -> [", String(dvs2[0])+",",
        dvs2[1], "]")
    print("                     c1.verificar() ->", valid1)
    print("                     c2.verificar() ->", valid2)

fn main():
    if len(argv()) < 2:
        help_user()
        return

    var option: String = argv()[1]
    if option == "--demo":
        demo()
        return

    var c = Cpf(numero="", numero_completo="")
    if len(argv()) > 2:
        if not len(c.reter_numeros(argv()[2], 1)):
            help_user()
            return

    var cpf: String = argv()[2]
    if option == "-c" or option == "--calcular":
        c.set_numero(cpf^)
        var dvs = c.calcular_digitos()
        print("[", String(dvs[0])+",", dvs[1], "]")
    elif option == "-v" or option == "--verificar":
        c.set_numero_completo(cpf^) 
        if not c.verificar():
            print("O CPF é inválido.")
        else:
            print("O CPF é válido.")
    else:
        help_user()
